{"meta":{"title":"Webos笔记","subtitle":"","description":"","author":"凌晨","url":"https://linngc.github.io","root":"/blog/"},"pages":[{"title":"分类","date":"2022-11-25T02:27:21.439Z","updated":"2022-11-25T02:27:21.439Z","comments":false,"path":"categories/index.html","permalink":"https://linngc.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-11-25T01:48:50.911Z","updated":"2022-11-25T01:48:50.911Z","comments":false,"path":"tags/index.html","permalink":"https://linngc.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"关于","slug":"about/index","date":"2022-11-25T00:48:55.374Z","updated":"2022-11-25T02:41:13.894Z","comments":true,"path":"2022/11/25/about/index/","link":"","permalink":"https://linngc.github.io/2022/11/25/about/index/","excerpt":"","text":"关于test","categories":[],"tags":[{"name":"关于","slug":"关于","permalink":"https://linngc.github.io/tags/%E5%85%B3%E4%BA%8E/"}]},{"title":"Markdown使用-文字加强","slug":"tags/随笔/Markdown使用-文字加强","date":"2022-11-23T09:20:59.000Z","updated":"2022-11-25T00:55:20.781Z","comments":true,"path":"2022/11/23/tags/随笔/Markdown使用-文字加强/","link":"","permalink":"https://linngc.github.io/2022/11/23/tags/%E9%9A%8F%E7%AC%94/Markdown%E4%BD%BF%E7%94%A8-%E6%96%87%E5%AD%97%E5%8A%A0%E5%BC%BA/","excerpt":"","text":"摘要来源：https://www.cnblogs.com/liangjianli/p/11518274.html 文字强调：加粗&#x2F;斜体&#x2F;文本高亮&#x2F;删除线&#x2F;下划线&#x2F;按键效果 序言 有时候，我们需要对某些文字进行强调，例如粗体和斜体。而Markdown通常可以使用星号*或者下划线_进行文字强调。 加粗 如果想要达到加粗的效果，可以使用一组和__包围着你想加粗的内容，例如加粗**或者__加粗__—&gt;效果：加粗或者 加粗 ps： 在博客园中如果使用__加粗__，而前面紧跟着文字时并不会生效，需要加一个空格才行。但如果前面是符号，则能够正常显示喷口水的表情。 例：我想__加粗__(前面没有加空格)，我想(没有加空格)加粗，我想 加粗(前面加了空格) tip： 为了尽量避免麻烦，建议直接使用一组**进行加粗。 斜体 如果想要达到使用_斜体_的效果，可以使用一组和_包围着你想进行倾斜的内容，例如斜体*或者_斜体_—&gt;效果：斜体或者 斜体 ps： 在博客园中如果使用_斜体_，而前面紧跟着文字时并不会生效，需要加一个空格才行。但如果前面是符号，则能够正常显示。 例： 我想用_斜体_(前面没有加空格)，我想用(没有加空格)斜体，我想用 斜体(前面加了空格) tip： 为了尽量避免麻烦，建议直接使用一组*表示斜体4. 文本高亮 如果想进行文本高亮，可以使用一组反引号()包着你想高亮的文本，例如：文本高亮&#96;–&gt;效果：文本高亮 删除线 使用包围着你想删除的文本，例如：文本删除~~—&gt;效果：文本删除 ps： jupyter notebook支持使用一组~来显示删除线。 以下是jupyter notebook的显示效果： kbd标签在jupyter notebook的显示效果 下划线 可以通过使用的html标签来达到下划线的效果，例如：下划线—&gt;效果：下划线 ps： 有时候超链接会显示下划线，尽量少给文本加下划线，以防止和超链接弄混 按键效果 例如使用html的行内元素，可以达到表示按键的效果 ctrl + R--->效果：ctrl + R","categories":[{"name":"Markdown使用","slug":"Markdown使用","permalink":"https://linngc.github.io/categories/Markdown%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://linngc.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"docker免密登陆宿主机步骤","slug":"tags/随笔/docker免密登陆宿主机步骤","date":"2022-11-23T09:20:59.000Z","updated":"2022-11-25T00:55:36.553Z","comments":true,"path":"2022/11/23/tags/随笔/docker免密登陆宿主机步骤/","link":"","permalink":"https://linngc.github.io/2022/11/23/tags/%E9%9A%8F%E7%AC%94/docker%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E5%AE%BF%E4%B8%BB%E6%9C%BA%E6%AD%A5%E9%AA%A4/","excerpt":"","text":"艇端项目docker容器配置免密登录操作步骤1.进入docker容器（usv_platform_1.0.0 为运行的容器别名） 1$ docker exec -it usv_platform_1.0.0 /bin/bash 2.在docker容器执行以下指令，并按回车键继续（执行指令后，会在/home/用户名/.ssh 路径下生成两个文件） 1$ ssh-keygen -t rsa -P &quot;&quot; 3.进入到ssh目录（在容器中），可以看到两个文件，id_rsa为私钥，id_rsa.pub为公钥 1$ cd ～/.ssh 4.将容器中的id_rsa.pub内的字符串拷贝追加到宿主机的authorized_keys文件中，即可实现SSH免密登录容器机的id_rsa.pub文件路径：/home/用户名/.ssh/id_rsa.pub宿主机的authorized_keys文件（不存在则自行创建文件）路径：/home/yunzhou/.ssh/authorized_keys 5.执行指以上操作后，在控制台验证SSH指令是否能正常免密","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://linngc.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"Hexo为文章设置目录与标签的方法","slug":"tags/随笔/hexo为文章设置目录与标签的方法","date":"2022-11-23T09:20:59.000Z","updated":"2022-11-25T00:55:26.077Z","comments":true,"path":"2022/11/23/tags/随笔/hexo为文章设置目录与标签的方法/","link":"","permalink":"https://linngc.github.io/2022/11/23/tags/%E9%9A%8F%E7%AC%94/hexo%E4%B8%BA%E6%96%87%E7%AB%A0%E8%AE%BE%E7%BD%AE%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%A0%87%E7%AD%BE%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"1. 创建目录页1hexo new page golang Hexo(主目录)\\source 目录中会生成一个 golang 文件夹，文件夹内有一个 index.md 文件，打开此文件，将其中的 type 修改为 golang 即可。 1234title: 分类date: 2021-08-16 10:27:28type: &quot;golang&quot;comments: false 2. 创建标签页 创建标签页与创建目录页方法相同。在网站根目录下执行以下代码。 1hexo new page tags Hexo\\source 目录中会生成一个 tags文件夹，文件夹内也有一个 index.md 文件，打开此文件，将其中的 type 修改为 tags 即可。 1234title: 分类date: 2021-08-16 10:27:28type: &quot;tags&quot;comments: false 3. 为文章设置目录与标签 在 Hexo\\source_posts 目录中创建.md文件即新建了一篇博客，在文章的开头部分添加如下代码 123456789title: 这里是文章的标题date: 这里是发表时间，如：2021-08-15 08:15:16description: 这里填写摘要。也可以把摘要这一段删去，在文章中想要截断的地方加入 &lt;!--more--&gt; ，这样在首页就只显示开头到截断的内容，而不会显示全文categories:- 分类- 子分类tags:- golang- java","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://linngc.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://linngc.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"hexo常用指令","slug":"tags/随笔/hexo常用指令","date":"2022-11-23T09:20:59.000Z","updated":"2022-11-25T00:55:34.709Z","comments":true,"path":"2022/11/23/tags/随笔/hexo常用指令/","link":"","permalink":"https://linngc.github.io/2022/11/23/tags/%E9%9A%8F%E7%AC%94/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","excerpt":"","text":"清除缓存文件 1$ hexo clean 生成静态文件 1$ hexo g 部署网站 1$ hexo d init 1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 本命令相当于执行了以下几步： Git clone hexo-starter 和 hexo-theme-landscape 主题到当前目录或指定目录。使用 Yarn 1、pnpm 或 npm 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 Node.js 安装。 new 1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 1$ hexo new &quot;post title with whitespace&quot; 参数 描述-p, –path 自定义新文章的路径-r, –replace 如果存在同名文章，将其替换-s, –slug 文章的 Slug，作为新文章的文件名和发布后的 URL默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录： 1hexo new page --path about/me &quot;About me&quot; 以上命令会创建一个 source&#x2F;about&#x2F;me.md 文件，同时 Front Matter 中的 title 为 “About me” 注意！title 是必须指定的！如果你这么做并不能达到你的目的： 1hexo new page --path about/me 此时 Hexo 会创建 source&#x2F;_posts&#x2F;about&#x2F;me.md，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。 generate 1$ hexo generate 生成静态文件。 选项 描述-d, –deploy 文件生成后立即部署网站-w, –watch 监视文件变动-b, –bail 生成过程中如果发生任何未处理的异常则抛出异常-f, –force 强制重新生成文件Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。使用该参数的效果接近 hexo clean &amp;&amp; hexo generate-c, –concurrency 最大同时生成文件的数量，默认无限制该命令可以简写为 1$ hexo g publish 1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server 1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述-p, –port 重设端口-s, –static 只使用静态文件-l, –log 启动日记记录，使用覆盖记录格式 deploy 1$ hexo deploy 部署网站。 参数 描述-g, –generate 部署之前预先生成静态文件该命令可以简写为： 1$ hexo d render 1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述-o, –output 设置输出路径migrate 1$ hexo migrate &lt;type&gt; 从其他博客系统 迁移内容。 clean 1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list 1$ hexo list &lt;type&gt; 列出网站资料。 version 1$ hexo version 显示 Hexo 版本。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://linngc.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://linngc.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"hexo搭建资料","slug":"tags/随笔/hexo搭建资料","date":"2022-11-23T09:20:59.000Z","updated":"2022-11-25T00:55:31.233Z","comments":true,"path":"2022/11/23/tags/随笔/hexo搭建资料/","link":"","permalink":"https://linngc.github.io/2022/11/23/tags/%E9%9A%8F%E7%AC%94/hexo%E6%90%AD%E5%BB%BA%E8%B5%84%E6%96%99/","excerpt":"","text":"hexo官方网站https://hexo.io/zh-cn/docs/commands#migrate 现使用皮肤https://github.com/JoeyBling/hexo-theme-yilia-plus","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://linngc.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://linngc.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"1.Docker命令大全之run命令","slug":"tags/docker/1.Docker命令大全之run命令","date":"2022-11-23T09:06:21.000Z","updated":"2022-11-25T02:41:28.682Z","comments":true,"path":"2022/11/23/tags/docker/1.Docker命令大全之run命令/","link":"","permalink":"https://linngc.github.io/2022/11/23/tags/docker/1.Docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%E4%B9%8Brun%E5%91%BD%E4%BB%A4/","excerpt":"","text":"Docker run 命令docker run ：创建一个新的容器并运行一个命令 语法1docker run [OPTIONS] IMAGE [COMMAND] [ARG...] OPTIONS说明： -a stdin: 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项； -d: 后台运行容器，并返回容器ID； -i: 以交互模式运行容器，通常与 -t 同时使用； -P: 随机端口映射，容器内部端口随机映射到主机的端口 -p: 指定端口映射，格式为：主机(宿主)端口:容器端口 t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用； –name&#x3D;”nginx-lb”: 为容器指定一个名称； –dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致； –dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致； -h “mars”: 指定容器的hostname； -e username&#x3D;”ritchie”: 设置环境变量； –env-file&#x3D;[]: 从指定文件读入环境变量； –cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”: 绑定容器到指定CPU运行； -m :设置容器使用内存最大值； –net&#x3D;”bridge”: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型； –link&#x3D;[]: 添加链接到另一个容器； –expose&#x3D;[]: 开放一个端口或一组端口； –volume , -v: 绑定一个卷 实例1.使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。 1docker run --name mynginx -d nginx:latest 2.使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。 1docker run -P -d nginx:latest 3.使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 &#x2F;data 映射到容器的 &#x2F;data。 1docker run -p 80:80 -v /data:/data -d nginx:latest 4.绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。 1$ docker run -p 127.0.0.1:80:8080/tcp ubuntu bash 5.使用镜像nginx:latest以交互模式启动一个容器,在容器内执行&#x2F;bin&#x2F;bash命令。 12runoob@runoob:~$ docker run -it nginx:latest /bin/bashroot@b8573233d675:/#","categories":[{"name":"部署","slug":"部署","permalink":"https://linngc.github.io/categories/%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"服务器","slug":"服务器","permalink":"https://linngc.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-11-23T07:15:51.104Z","updated":"2022-10-17T12:43:50.000Z","comments":true,"path":"2022/11/23/hello-world/","link":"","permalink":"https://linngc.github.io/2022/11/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Markdown使用","slug":"Markdown使用","permalink":"https://linngc.github.io/categories/Markdown%E4%BD%BF%E7%94%A8/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://linngc.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"部署","slug":"部署","permalink":"https://linngc.github.io/categories/%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"关于","slug":"关于","permalink":"https://linngc.github.io/tags/%E5%85%B3%E4%BA%8E/"},{"name":"随笔","slug":"随笔","permalink":"https://linngc.github.io/tags/%E9%9A%8F%E7%AC%94/"},{"name":"服务器","slug":"服务器","permalink":"https://linngc.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]}