<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Webos个人笔记</title>
  
  
  <link href="http://example.com/blog/atom.xml" rel="self"/>
  
  <link href="http://example.com/blog/"/>
  <updated>2022-11-24T01:38:00.771Z</updated>
  <id>http://example.com/blog/</id>
  
  <author>
    <name>凌晨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker免密登陆宿主机步骤</title>
    <link href="http://example.com/blog/2022/11/23/tags/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/docker%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E5%AE%BF%E4%B8%BB%E6%9C%BA%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/blog/2022/11/23/tags/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/docker%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E5%AE%BF%E4%B8%BB%E6%9C%BA%E6%AD%A5%E9%AA%A4/</id>
    <published>2022-11-23T09:20:59.000Z</published>
    <updated>2022-11-24T01:38:00.771Z</updated>
    
    <content type="html"><![CDATA[<h4 id="艇端项目docker容器配置免密登录操作步骤"><a href="#艇端项目docker容器配置免密登录操作步骤" class="headerlink" title="艇端项目docker容器配置免密登录操作步骤"></a>艇端项目docker容器配置免密登录操作步骤</h4><p>1.进入docker容器（usv_platform_1.0.0为运行的容器别名）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it usv_platform_1.0.0 /bin/bash</span></span><br></pre></td></tr></table></figure><p>2.在docker容器执行以下指令，并按回车键继续（执行指令后，会在&#x2F;home&#x2F;用户名&#x2F;.ssh路径下生成两个文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span></span></span><br></pre></td></tr></table></figure><p><img src="/blog/cdn/%E9%9A%8F%E7%AC%94/docker%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E5%AE%BF%E4%B8%BB%E6%9C%BA%E6%AD%A5%E9%AA%A4/1.png" alt="image"></p><p>3.进入到ssh目录（在容器中），可以看到两个文件，id_rsa为私钥，id_rsa.pub为公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ～/.ssh</span></span><br></pre></td></tr></table></figure><p><img src="/blog/cdn/%E9%9A%8F%E7%AC%94/docker%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E5%AE%BF%E4%B8%BB%E6%9C%BA%E6%AD%A5%E9%AA%A4/2.png" alt="image"></p><p>4.将容器中的id_rsa.pub内的字符串拷贝追加到宿主机的authorized_keys文件中，即可实现SSH免密登录<br>容器机的id_rsa.pub文件路径：&#x2F;home&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa.pub<br>宿主机的authorized_keys文件（不存在则自行创建文件）路径：&#x2F;home&#x2F;yunzhou&#x2F;.ssh&#x2F;authorized_keys</p><p>5.执行指以上操作后，在控制台验证SSH指令是否能正常免密</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;艇端项目docker容器配置免密登录操作步骤&quot;&gt;&lt;a href=&quot;#艇端项目docker容器配置免密登录操作步骤&quot; class=&quot;headerlink&quot; title=&quot;艇端项目docker容器配置免密登录操作步骤&quot;&gt;&lt;/a&gt;艇端项目docker容器配置免密登录操作</summary>
      
    
    
    
    
    <category term="技术笔记" scheme="http://example.com/blog/tags/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用指令</title>
    <link href="http://example.com/blog/2022/11/23/tags/%E9%9A%8F%E7%AC%94/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/blog/2022/11/23/tags/%E9%9A%8F%E7%AC%94/hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</id>
    <published>2022-11-23T09:20:59.000Z</published>
    <updated>2022-11-24T01:51:56.728Z</updated>
    
    <content type="html"><![CDATA[<ol><li>清除缓存文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><ol start="2"><li>生成静态文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><ol start="3"><li>部署网站</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d </span><br></pre></td></tr></table></figure><ol start="4"><li>init</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><p>Git clone hexo-starter 和 hexo-theme-landscape 主题到当前目录或指定目录。<br>使用 Yarn 1、pnpm 或 npm 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 Node.js 安装。</p><ol start="5"><li>new</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><p>参数描述<br>-p, –path自定义新文章的路径<br>-r, –replace如果存在同名文章，将其替换<br>-s, –slug文章的 Slug，作为新文章的文件名和发布后的 URL<br>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>以上命令会创建一个 source&#x2F;about&#x2F;me.md 文件，同时 Front Matter 中的 title 为 “About me”</p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 source&#x2F;_posts&#x2F;about&#x2F;me.md，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。</p><ol start="6"><li>generate</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><p>选项描述<br>-d, –deploy文件生成后立即部署网站<br>-w, –watch监视文件变动<br>-b, –bail生成过程中如果发生任何未处理的异常则抛出异常<br>-f, –force强制重新生成文件<br>Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。<br>使用该参数的效果接近 hexo clean &amp;&amp; hexo generate<br>-c, –concurrency最大同时生成文件的数量，默认无限制<br>该命令可以简写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><ol start="7"><li>publish</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><ol start="8"><li>server</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p><p>选项描述<br>-p, –port重设端口<br>-s, –static只使用静态文件<br>-l, –log启动日记记录，使用覆盖记录格式</p><ol start="9"><li>deploy</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><p>参数描述<br>-g, –generate部署之前预先生成静态文件<br>该命令可以简写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><ol start="10"><li>render</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><p>参数描述<br>-o, –output设置输出路径<br>migrate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 迁移内容。</p><ol start="11"><li>clean</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><ol start="12"><li>list</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><ol start="13"><li>version</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;清除缓存文件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/blog/categories/hexo/"/>
    
    <category term="博客搭建" scheme="http://example.com/blog/categories/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="随笔" scheme="http://example.com/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建资料</title>
    <link href="http://example.com/blog/2022/11/23/tags/%E9%9A%8F%E7%AC%94/hexo%E6%90%AD%E5%BB%BA%E8%B5%84%E6%96%99/"/>
    <id>http://example.com/blog/2022/11/23/tags/%E9%9A%8F%E7%AC%94/hexo%E6%90%AD%E5%BB%BA%E8%B5%84%E6%96%99/</id>
    <published>2022-11-23T09:20:59.000Z</published>
    <updated>2022-11-24T01:40:39.990Z</updated>
    
    <content type="html"><![CDATA[<ol><li>hexo官方网站<br><a href="https://hexo.io/zh-cn/docs/commands#migrate">https://hexo.io/zh-cn/docs/commands#migrate</a></li><li>现使用皮肤<br><a href="https://github.com/JoeyBling/hexo-theme-yilia-plus">https://github.com/JoeyBling/hexo-theme-yilia-plus</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;hexo官方网站&lt;br&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/commands#migrate&quot;&gt;https://hexo.io/zh-cn/docs/commands#migrate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;现使用皮肤&lt;br</summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/blog/categories/hexo/"/>
    
    <category term="博客搭建" scheme="http://example.com/blog/categories/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="随笔" scheme="http://example.com/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hexo为文章设置目录与标签的方法</title>
    <link href="http://example.com/blog/2022/11/23/tags/%E9%9A%8F%E7%AC%94/hexo%E4%B8%BA%E6%96%87%E7%AB%A0%E8%AE%BE%E7%BD%AE%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%A0%87%E7%AD%BE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/blog/2022/11/23/tags/%E9%9A%8F%E7%AC%94/hexo%E4%B8%BA%E6%96%87%E7%AB%A0%E8%AE%BE%E7%BD%AE%E7%9B%AE%E5%BD%95%E4%B8%8E%E6%A0%87%E7%AD%BE%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-11-23T09:20:59.000Z</published>
    <updated>2022-11-24T01:32:54.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-创建目录页"><a href="#1-创建目录页" class="headerlink" title="1. 创建目录页"></a>1. 创建目录页</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page golang</span><br></pre></td></tr></table></figure><pre><code>Hexo(主目录)\source 目录中会生成一个 golang 文件夹，文件夹内有一个 index.md 文件，打开此文件，将其中的 type 修改为 golang 即可。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2021-08-16 10:27:28</span><br><span class="line">type: &quot;golang&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><h3 id="2-创建标签页"><a href="#2-创建标签页" class="headerlink" title="2. 创建标签页"></a>2. 创建标签页</h3><p>    创建标签页与创建目录页方法相同。在网站根目录下执行以下代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><pre><code>Hexo\source 目录中会生成一个 tags文件夹，文件夹内也有一个 index.md 文件，打开此文件，将其中的 type 修改为 tags 即可。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2021-08-16 10:27:28</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><h3 id="3-为文章设置目录与标签"><a href="#3-为文章设置目录与标签" class="headerlink" title="3. 为文章设置目录与标签"></a>3. 为文章设置目录与标签</h3><p>   在 Hexo\source_posts 目录中创建.md文件即新建了一篇博客，在文章的开头部分添加如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: 这里是文章的标题</span><br><span class="line">date: 这里是发表时间，如：2021-08-15 08:15:16</span><br><span class="line">description: 这里填写摘要。也可以把摘要这一段删去，在文章中想要截断的地方加入 &lt;!--more--&gt; ，这样在首页就只显示开头到截断的内容，而不会显示全文</span><br><span class="line">categories:</span><br><span class="line">- 分类</span><br><span class="line">- 子分类</span><br><span class="line">tags:</span><br><span class="line">- golang</span><br><span class="line">- java</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-创建目录页&quot;&gt;&lt;a href=&quot;#1-创建目录页&quot; class=&quot;headerlink&quot; title=&quot;1. 创建目录页&quot;&gt;&lt;/a&gt;1. 创建目录页&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="hexo" scheme="http://example.com/blog/categories/hexo/"/>
    
    <category term="博客搭建" scheme="http://example.com/blog/categories/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="随笔" scheme="http://example.com/blog/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>1.Docker命令大全之run命令</title>
    <link href="http://example.com/blog/2022/11/23/tags/docker/1.Docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%E4%B9%8Brun%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/blog/2022/11/23/tags/docker/1.Docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8%E4%B9%8Brun%E5%91%BD%E4%BB%A4/</id>
    <published>2022-11-23T09:06:21.000Z</published>
    <updated>2022-11-24T01:12:15.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-run-命令"><a href="#Docker-run-命令" class="headerlink" title="Docker run 命令"></a>Docker run 命令</h3><p><strong>docker run</strong> ：创建一个新的容器并运行一个命令</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p><strong>OPTIONS说明：</strong></p><ul><li><p>-a stdin: 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</p></li><li><p>-d: 后台运行容器，并返回容器ID；</p></li><li><p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p></li><li><p>-P: 随机端口映射，容器内部端口随机映射到主机的端口</p></li><li><p>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</p></li><li><p>t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p></li><li><p>–name&#x3D;”nginx-lb”: 为容器指定一个名称；</p></li><li><p>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</p></li><li><p>–dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</p></li><li><p>-h “mars”: 指定容器的hostname；</p></li><li><p>-e username&#x3D;”ritchie”: 设置环境变量；</p></li><li><p>–env-file&#x3D;[]: 从指定文件读入环境变量；</p></li><li><p>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”: 绑定容器到指定CPU运行；</p></li><li><p>-m :设置容器使用内存最大值；</p></li><li><p>–net&#x3D;”bridge”: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</p></li><li><p>–link&#x3D;[]: 添加链接到另一个容器；</p></li><li><p>–expose&#x3D;[]: 开放一个端口或一组端口；</p></li><li><p>–volume , -v: 绑定一个卷</p></li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>1.使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mynginx -d nginx:latest</span><br></pre></td></tr></table></figure><p>2.使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -P -d nginx:latest</span><br></pre></td></tr></table></figure><p>3.使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 &#x2F;data 映射到容器的 &#x2F;data。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 -v /data:/data -d nginx:latest</span><br></pre></td></tr></table></figure><p>4.绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 127.0.0.1:80:8080/tcp ubuntu bash</span><br></pre></td></tr></table></figure><p>5.使用镜像nginx:latest以交互模式启动一个容器,在容器内执行&#x2F;bin&#x2F;bash命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker run -it nginx:latest /bin/bash</span><br><span class="line">root@b8573233d675:/# </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Docker-run-命令&quot;&gt;&lt;a href=&quot;#Docker-run-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker run 命令&quot;&gt;&lt;/a&gt;Docker run 命令&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;docker run&lt;/strong</summary>
      
    
    
    
    
    <category term="docker" scheme="http://example.com/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/blog/2022/11/23/hello-world/"/>
    <id>http://example.com/blog/2022/11/23/hello-world/</id>
    <published>2022-11-23T07:15:51.104Z</published>
    <updated>2022-10-17T12:43:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
